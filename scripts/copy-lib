#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

if [ $# -ne 1 ]
then
    echo "usage: $0 <path-to-submodule>"
fi

submodule_path="$1"
src_sha="$(git submodule status -- "$1" | awk '{print $1}')"
gen_comment="$0 $* at $src_sha"
build_dir="$submodule_path/build"
src_dir="$submodule_path/src"
license_file="$submodule_path/COPYING"

pushd "$submodule_path"
# this is a hack!
# we need the generated files e.g. config.h in the same dir
# as the .go files for cgo to compile it. But this requires
# generating this file now. Admittedly there's no much generated here
# so maybe not a big problem
make build
popd

move_file () {
    local src_path="$1"
    local filename="$2"
    local gen_comment="$3"

    printf "// Code generated by %s DO NOT EDIT.\n// See %s for license\n" \
        "$gen_comment" \
        "$license_file" \
        > "$filename"
    cat -- "$src_path" >> "$filename"
}

src_paths=("$build_dir/src" "$src_dir")
if [[ "$1" =~ "gfm" ]]
then
    src_paths+=("$submodule_path/extensions")
fi

# avoid copying main to avoid: multiple definition of `main'
while read -r filepath
do
    filename="$(basename -- "$filepath")"
    move_file "$filepath" "$filename" "$gen_comment"
done < <(find \
    "${src_paths[@]}" \
    -type f \
    -not -name 'main.c' -a \
    \( -name '*.[ch]' -o -name '*.inc' \) )
